# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import tilt_dev.python-kubernetes.client
from tilt-dev/python-kubernetes.client.models.v1alpha1_cmd import V1alpha1Cmd  # noqa: E501
from tilt-dev/python-kubernetes.client.rest import ApiException

class TestV1alpha1Cmd(unittest.TestCase):
    """V1alpha1Cmd unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1Cmd
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = tilt-dev/python-kubernetes.client.models.v1alpha1_cmd.V1alpha1Cmd()  # noqa: E501
        if include_optional :
            return V1alpha1Cmd(
                api_version = '0',
                kind = '0',
                metadata = tilt-dev/python-kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        },
                    cluster_name = '0',
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    deletion_grace_period_seconds = 56,
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    finalizers = [
                        '0'
                        ],
                    generate_name = '0',
                    generation = 56,
                    labels = {
                        'key' : '0'
                        },
                    managed_fields = [
                        tilt-dev/python-kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0',
                            fields_type = '0',
                            fields_v1 = tilt-dev/python-kubernetes.client.models.fields_v1.fieldsV1(),
                            manager = '0',
                            operation = '0',
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ],
                    name = '0',
                    namespace = '0',
                    owner_references = [
                        tilt-dev/python-kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0',
                            block_owner_deletion = True,
                            controller = True,
                            kind = '0',
                            name = '0',
                            uid = '0', )
                        ],
                    resource_version = '0',
                    self_link = '0',
                    uid = '0', ),
                spec = tilt-dev/python-kubernetes.client.models.v1alpha1/cmd_spec.v1alpha1.CmdSpec(
                    args = [
                        '0'
                        ],
                    dir = '0',
                    env = [
                        '0'
                        ],
                    readiness_probe = tilt-dev/python-kubernetes.client.models.v1alpha1/probe.v1alpha1.Probe(
                        exec = tilt-dev/python-kubernetes.client.models.v1alpha1/exec_action.v1alpha1.ExecAction(
                            command = [
                                '0'
                                ], ),
                        failure_threshold = 56,
                        http_get = tilt-dev/python-kubernetes.client.models.v1alpha1/http_get_action.v1alpha1.HTTPGetAction(
                            host = '0',
                            http_headers = [
                                tilt-dev/python-kubernetes.client.models.v1alpha1/http_header.v1alpha1.HTTPHeader(
                                    name = '0',
                                    value = '0', )
                                ],
                            path = '0',
                            port = 56,
                            scheme = '0', ),
                        initial_delay_seconds = 56,
                        period_seconds = 56,
                        success_threshold = 56,
                        tcp_socket = tilt-dev/python-kubernetes.client.models.v1alpha1/tcp_socket_action.v1alpha1.TCPSocketAction(
                            host = '0',
                            port = 56, ),
                        timeout_seconds = 56, ),
                    restart_on = tilt-dev/python-kubernetes.client.models.v1alpha1/restart_on_spec.v1alpha1.RestartOnSpec(
                        file_watches = [
                            '0'
                            ], ), ),
                status = tilt-dev/python-kubernetes.client.models.v1alpha1/cmd_status.v1alpha1.CmdStatus(
                    ready = True,
                    running = tilt-dev/python-kubernetes.client.models.v1alpha1/cmd_state_running.v1alpha1.CmdStateRunning(
                        pid = 56,
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                    terminated = tilt-dev/python-kubernetes.client.models.v1alpha1/cmd_state_terminated.v1alpha1.CmdStateTerminated(
                        exit_code = 56,
                        finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        pid = 56,
                        reason = '0',
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                    waiting = tilt-dev/python-kubernetes.client.models.v1alpha1/cmd_state_waiting.v1alpha1.CmdStateWaiting(
                        reason = '0', ), )
            )
        else :
            return V1alpha1Cmd(
        )

    def testV1alpha1Cmd(self):
        """Test V1alpha1Cmd"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
