# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import tilt_dev.python-kubernetes.client
from tilt-dev/python-kubernetes.client.models.v1alpha1_ui_resource import V1alpha1UIResource  # noqa: E501
from tilt-dev/python-kubernetes.client.rest import ApiException

class TestV1alpha1UIResource(unittest.TestCase):
    """V1alpha1UIResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1UIResource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = tilt-dev/python-kubernetes.client.models.v1alpha1_ui_resource.V1alpha1UIResource()  # noqa: E501
        if include_optional :
            return V1alpha1UIResource(
                api_version = '0',
                kind = '0',
                metadata = tilt-dev/python-kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        },
                    cluster_name = '0',
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    deletion_grace_period_seconds = 56,
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    finalizers = [
                        '0'
                        ],
                    generate_name = '0',
                    generation = 56,
                    labels = {
                        'key' : '0'
                        },
                    managed_fields = [
                        tilt-dev/python-kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0',
                            fields_type = '0',
                            fields_v1 = tilt-dev/python-kubernetes.client.models.fields_v1.fieldsV1(),
                            manager = '0',
                            operation = '0',
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ],
                    name = '0',
                    namespace = '0',
                    owner_references = [
                        tilt-dev/python-kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0',
                            block_owner_deletion = True,
                            controller = True,
                            kind = '0',
                            name = '0',
                            uid = '0', )
                        ],
                    resource_version = '0',
                    self_link = '0',
                    uid = '0', ),
                spec = None,
                status = tilt-dev/python-kubernetes.client.models.v1alpha1/ui_resource_status.v1alpha1.UIResourceStatus(
                    build_history = [
                        tilt-dev/python-kubernetes.client.models.v1alpha1/ui_build_terminated.v1alpha1.UIBuildTerminated(
                            error = '0',
                            finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            is_crash_rebuild = True,
                            span_id = '0',
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                            warnings = [
                                '0'
                                ], )
                        ],
                    current_build = tilt-dev/python-kubernetes.client.models.v1alpha1/ui_build_running.v1alpha1.UIBuildRunning(
                        span_id = '0',
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                    endpoint_links = [
                        tilt-dev/python-kubernetes.client.models.v1alpha1/ui_resource_link.v1alpha1.UIResourceLink(
                            name = '0',
                            url = '0', )
                        ],
                    has_pending_changes = True,
                    k8s_resource_info = tilt-dev/python-kubernetes.client.models.v1alpha1/ui_resource_kubernetes.v1alpha1.UIResourceKubernetes(
                        all_containers_ready = True,
                        display_names = [
                            '0'
                            ],
                        pod_creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        pod_name = '0',
                        pod_restarts = 56,
                        pod_status = '0',
                        pod_status_message = '0',
                        pod_update_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        span_id = '0', ),
                    last_deploy_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    local_resource_info = tilt-dev/python-kubernetes.client.models.v1alpha1/ui_resource_local.v1alpha1.UIResourceLocal(
                        is_test = True,
                        pid = 56, ),
                    pending_build_since = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    queued = True,
                    runtime_status = '0',
                    specs = [
                        tilt-dev/python-kubernetes.client.models.v1alpha1/ui_resource_target_spec.v1alpha1.UIResourceTargetSpec(
                            has_live_update = True,
                            id = '0',
                            type = '0', )
                        ],
                    trigger_mode = 56,
                    update_status = '0', )
            )
        else :
            return V1alpha1UIResource(
        )

    def testV1alpha1UIResource(self):
        """Test V1alpha1UIResource"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
