# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1UIResourceKubernetes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_containers_ready': 'bool',
        'display_names': 'list[str]',
        'pod_creation_time': 'datetime',
        'pod_name': 'str',
        'pod_restarts': 'int',
        'pod_status': 'str',
        'pod_status_message': 'str',
        'pod_update_start_time': 'datetime',
        'span_id': 'str'
    }

    attribute_map = {
        'all_containers_ready': 'allContainersReady',
        'display_names': 'displayNames',
        'pod_creation_time': 'podCreationTime',
        'pod_name': 'podName',
        'pod_restarts': 'podRestarts',
        'pod_status': 'podStatus',
        'pod_status_message': 'podStatusMessage',
        'pod_update_start_time': 'podUpdateStartTime',
        'span_id': 'spanID'
    }

    def __init__(self, all_containers_ready=None, display_names=None, pod_creation_time=None, pod_name=None, pod_restarts=None, pod_status=None, pod_status_message=None, pod_update_start_time=None, span_id=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1UIResourceKubernetes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._all_containers_ready = None
        self._display_names = None
        self._pod_creation_time = None
        self._pod_name = None
        self._pod_restarts = None
        self._pod_status = None
        self._pod_status_message = None
        self._pod_update_start_time = None
        self._span_id = None
        self.discriminator = None

        if all_containers_ready is not None:
            self.all_containers_ready = all_containers_ready
        if display_names is not None:
            self.display_names = display_names
        if pod_creation_time is not None:
            self.pod_creation_time = pod_creation_time
        if pod_name is not None:
            self.pod_name = pod_name
        if pod_restarts is not None:
            self.pod_restarts = pod_restarts
        if pod_status is not None:
            self.pod_status = pod_status
        if pod_status_message is not None:
            self.pod_status_message = pod_status_message
        if pod_update_start_time is not None:
            self.pod_update_start_time = pod_update_start_time
        if span_id is not None:
            self.span_id = span_id

    @property
    def all_containers_ready(self):
        """Gets the all_containers_ready of this V1alpha1UIResourceKubernetes.  # noqa: E501

        Whether all the containers in the pod are currently healthy and have passed readiness checks.  # noqa: E501

        :return: The all_containers_ready of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: bool
        """
        return self._all_containers_ready

    @all_containers_ready.setter
    def all_containers_ready(self, all_containers_ready):
        """Sets the all_containers_ready of this V1alpha1UIResourceKubernetes.

        Whether all the containers in the pod are currently healthy and have passed readiness checks.  # noqa: E501

        :param all_containers_ready: The all_containers_ready of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: bool
        """

        self._all_containers_ready = all_containers_ready

    @property
    def display_names(self):
        """Gets the display_names of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The list of all resources deployed in the Kubernetes deploy for this resource.  # noqa: E501

        :return: The display_names of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """Sets the display_names of this V1alpha1UIResourceKubernetes.

        The list of all resources deployed in the Kubernetes deploy for this resource.  # noqa: E501

        :param display_names: The display_names of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: list[str]
        """

        self._display_names = display_names

    @property
    def pod_creation_time(self):
        """Gets the pod_creation_time of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The creation time of the active pod.  # noqa: E501

        :return: The pod_creation_time of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: datetime
        """
        return self._pod_creation_time

    @pod_creation_time.setter
    def pod_creation_time(self, pod_creation_time):
        """Sets the pod_creation_time of this V1alpha1UIResourceKubernetes.

        The creation time of the active pod.  # noqa: E501

        :param pod_creation_time: The pod_creation_time of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: datetime
        """

        self._pod_creation_time = pod_creation_time

    @property
    def pod_name(self):
        """Gets the pod_name of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The name of the active pod.  The active pod tends to be what Tilt defaults to for port-forwards, live-updates, etc.  # noqa: E501

        :return: The pod_name of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name):
        """Sets the pod_name of this V1alpha1UIResourceKubernetes.

        The name of the active pod.  The active pod tends to be what Tilt defaults to for port-forwards, live-updates, etc.  # noqa: E501

        :param pod_name: The pod_name of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: str
        """

        self._pod_name = pod_name

    @property
    def pod_restarts(self):
        """Gets the pod_restarts of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The number of pod restarts.  # noqa: E501

        :return: The pod_restarts of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: int
        """
        return self._pod_restarts

    @pod_restarts.setter
    def pod_restarts(self, pod_restarts):
        """Sets the pod_restarts of this V1alpha1UIResourceKubernetes.

        The number of pod restarts.  # noqa: E501

        :param pod_restarts: The pod_restarts of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: int
        """

        self._pod_restarts = pod_restarts

    @property
    def pod_status(self):
        """Gets the pod_status of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The status of the active pod.  # noqa: E501

        :return: The pod_status of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: str
        """
        return self._pod_status

    @pod_status.setter
    def pod_status(self, pod_status):
        """Sets the pod_status of this V1alpha1UIResourceKubernetes.

        The status of the active pod.  # noqa: E501

        :param pod_status: The pod_status of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: str
        """

        self._pod_status = pod_status

    @property
    def pod_status_message(self):
        """Gets the pod_status_message of this V1alpha1UIResourceKubernetes.  # noqa: E501

        Extra error messaging around the current status of the active pod.  # noqa: E501

        :return: The pod_status_message of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: str
        """
        return self._pod_status_message

    @pod_status_message.setter
    def pod_status_message(self, pod_status_message):
        """Sets the pod_status_message of this V1alpha1UIResourceKubernetes.

        Extra error messaging around the current status of the active pod.  # noqa: E501

        :param pod_status_message: The pod_status_message of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: str
        """

        self._pod_status_message = pod_status_message

    @property
    def pod_update_start_time(self):
        """Gets the pod_update_start_time of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The last update time of the active pod  # noqa: E501

        :return: The pod_update_start_time of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: datetime
        """
        return self._pod_update_start_time

    @pod_update_start_time.setter
    def pod_update_start_time(self, pod_update_start_time):
        """Sets the pod_update_start_time of this V1alpha1UIResourceKubernetes.

        The last update time of the active pod  # noqa: E501

        :param pod_update_start_time: The pod_update_start_time of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: datetime
        """

        self._pod_update_start_time = pod_update_start_time

    @property
    def span_id(self):
        """Gets the span_id of this V1alpha1UIResourceKubernetes.  # noqa: E501

        The span where this pod stores its logs in the Tilt logstore.  # noqa: E501

        :return: The span_id of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this V1alpha1UIResourceKubernetes.

        The span where this pod stores its logs in the Tilt logstore.  # noqa: E501

        :param span_id: The span_id of this V1alpha1UIResourceKubernetes.  # noqa: E501
        :type: str
        """

        self._span_id = span_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1UIResourceKubernetes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1UIResourceKubernetes):
            return True

        return self.to_dict() != other.to_dict()
