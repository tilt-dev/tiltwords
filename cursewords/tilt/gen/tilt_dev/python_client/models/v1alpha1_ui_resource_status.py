# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1UIResourceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'build_history': 'list[V1alpha1UIBuildTerminated]',
        'current_build': 'V1alpha1UIBuildRunning',
        'endpoint_links': 'list[V1alpha1UIResourceLink]',
        'has_pending_changes': 'bool',
        'k8s_resource_info': 'V1alpha1UIResourceKubernetes',
        'last_deploy_time': 'datetime',
        'local_resource_info': 'V1alpha1UIResourceLocal',
        'pending_build_since': 'datetime',
        'queued': 'bool',
        'runtime_status': 'str',
        'specs': 'list[V1alpha1UIResourceTargetSpec]',
        'trigger_mode': 'int',
        'update_status': 'str'
    }

    attribute_map = {
        'build_history': 'buildHistory',
        'current_build': 'currentBuild',
        'endpoint_links': 'endpointLinks',
        'has_pending_changes': 'hasPendingChanges',
        'k8s_resource_info': 'k8sResourceInfo',
        'last_deploy_time': 'lastDeployTime',
        'local_resource_info': 'localResourceInfo',
        'pending_build_since': 'pendingBuildSince',
        'queued': 'queued',
        'runtime_status': 'runtimeStatus',
        'specs': 'specs',
        'trigger_mode': 'triggerMode',
        'update_status': 'updateStatus'
    }

    def __init__(self, build_history=None, current_build=None, endpoint_links=None, has_pending_changes=None, k8s_resource_info=None, last_deploy_time=None, local_resource_info=None, pending_build_since=None, queued=None, runtime_status=None, specs=None, trigger_mode=None, update_status=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1UIResourceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._build_history = None
        self._current_build = None
        self._endpoint_links = None
        self._has_pending_changes = None
        self._k8s_resource_info = None
        self._last_deploy_time = None
        self._local_resource_info = None
        self._pending_build_since = None
        self._queued = None
        self._runtime_status = None
        self._specs = None
        self._trigger_mode = None
        self._update_status = None
        self.discriminator = None

        if build_history is not None:
            self.build_history = build_history
        if current_build is not None:
            self.current_build = current_build
        if endpoint_links is not None:
            self.endpoint_links = endpoint_links
        if has_pending_changes is not None:
            self.has_pending_changes = has_pending_changes
        if k8s_resource_info is not None:
            self.k8s_resource_info = k8s_resource_info
        if last_deploy_time is not None:
            self.last_deploy_time = last_deploy_time
        if local_resource_info is not None:
            self.local_resource_info = local_resource_info
        if pending_build_since is not None:
            self.pending_build_since = pending_build_since
        if queued is not None:
            self.queued = queued
        if runtime_status is not None:
            self.runtime_status = runtime_status
        if specs is not None:
            self.specs = specs
        if trigger_mode is not None:
            self.trigger_mode = trigger_mode
        if update_status is not None:
            self.update_status = update_status

    @property
    def build_history(self):
        """Gets the build_history of this V1alpha1UIResourceStatus.  # noqa: E501

        Past completed builds.  # noqa: E501

        :return: The build_history of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: list[V1alpha1UIBuildTerminated]
        """
        return self._build_history

    @build_history.setter
    def build_history(self, build_history):
        """Sets the build_history of this V1alpha1UIResourceStatus.

        Past completed builds.  # noqa: E501

        :param build_history: The build_history of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: list[V1alpha1UIBuildTerminated]
        """

        self._build_history = build_history

    @property
    def current_build(self):
        """Gets the current_build of this V1alpha1UIResourceStatus.  # noqa: E501


        :return: The current_build of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: V1alpha1UIBuildRunning
        """
        return self._current_build

    @current_build.setter
    def current_build(self, current_build):
        """Sets the current_build of this V1alpha1UIResourceStatus.


        :param current_build: The current_build of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: V1alpha1UIBuildRunning
        """

        self._current_build = current_build

    @property
    def endpoint_links(self):
        """Gets the endpoint_links of this V1alpha1UIResourceStatus.  # noqa: E501

        Links attached to this resource.  # noqa: E501

        :return: The endpoint_links of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: list[V1alpha1UIResourceLink]
        """
        return self._endpoint_links

    @endpoint_links.setter
    def endpoint_links(self, endpoint_links):
        """Sets the endpoint_links of this V1alpha1UIResourceStatus.

        Links attached to this resource.  # noqa: E501

        :param endpoint_links: The endpoint_links of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: list[V1alpha1UIResourceLink]
        """

        self._endpoint_links = endpoint_links

    @property
    def has_pending_changes(self):
        """Gets the has_pending_changes of this V1alpha1UIResourceStatus.  # noqa: E501

        True if the build was put in the pending queue due to file changes.  # noqa: E501

        :return: The has_pending_changes of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_pending_changes

    @has_pending_changes.setter
    def has_pending_changes(self, has_pending_changes):
        """Sets the has_pending_changes of this V1alpha1UIResourceStatus.

        True if the build was put in the pending queue due to file changes.  # noqa: E501

        :param has_pending_changes: The has_pending_changes of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: bool
        """

        self._has_pending_changes = has_pending_changes

    @property
    def k8s_resource_info(self):
        """Gets the k8s_resource_info of this V1alpha1UIResourceStatus.  # noqa: E501


        :return: The k8s_resource_info of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: V1alpha1UIResourceKubernetes
        """
        return self._k8s_resource_info

    @k8s_resource_info.setter
    def k8s_resource_info(self, k8s_resource_info):
        """Sets the k8s_resource_info of this V1alpha1UIResourceStatus.


        :param k8s_resource_info: The k8s_resource_info of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: V1alpha1UIResourceKubernetes
        """

        self._k8s_resource_info = k8s_resource_info

    @property
    def last_deploy_time(self):
        """Gets the last_deploy_time of this V1alpha1UIResourceStatus.  # noqa: E501

        The last time this resource was deployed.  # noqa: E501

        :return: The last_deploy_time of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deploy_time

    @last_deploy_time.setter
    def last_deploy_time(self, last_deploy_time):
        """Sets the last_deploy_time of this V1alpha1UIResourceStatus.

        The last time this resource was deployed.  # noqa: E501

        :param last_deploy_time: The last_deploy_time of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: datetime
        """

        self._last_deploy_time = last_deploy_time

    @property
    def local_resource_info(self):
        """Gets the local_resource_info of this V1alpha1UIResourceStatus.  # noqa: E501


        :return: The local_resource_info of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: V1alpha1UIResourceLocal
        """
        return self._local_resource_info

    @local_resource_info.setter
    def local_resource_info(self, local_resource_info):
        """Sets the local_resource_info of this V1alpha1UIResourceStatus.


        :param local_resource_info: The local_resource_info of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: V1alpha1UIResourceLocal
        """

        self._local_resource_info = local_resource_info

    @property
    def pending_build_since(self):
        """Gets the pending_build_since of this V1alpha1UIResourceStatus.  # noqa: E501

        When the build was put in the pending queue.  # noqa: E501

        :return: The pending_build_since of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._pending_build_since

    @pending_build_since.setter
    def pending_build_since(self, pending_build_since):
        """Sets the pending_build_since of this V1alpha1UIResourceStatus.

        When the build was put in the pending queue.  # noqa: E501

        :param pending_build_since: The pending_build_since of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: datetime
        """

        self._pending_build_since = pending_build_since

    @property
    def queued(self):
        """Gets the queued of this V1alpha1UIResourceStatus.  # noqa: E501

        Queued is a simple indicator of whether the resource is queued for an update.  # noqa: E501

        :return: The queued of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this V1alpha1UIResourceStatus.

        Queued is a simple indicator of whether the resource is queued for an update.  # noqa: E501

        :param queued: The queued of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: bool
        """

        self._queued = queued

    @property
    def runtime_status(self):
        """Gets the runtime_status of this V1alpha1UIResourceStatus.  # noqa: E501

        The RuntimeStatus is a simple, high-level summary of the runtime state of a server.  Not all resources run servers.  # noqa: E501

        :return: The runtime_status of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._runtime_status

    @runtime_status.setter
    def runtime_status(self, runtime_status):
        """Sets the runtime_status of this V1alpha1UIResourceStatus.

        The RuntimeStatus is a simple, high-level summary of the runtime state of a server.  Not all resources run servers.  # noqa: E501

        :param runtime_status: The runtime_status of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: str
        """

        self._runtime_status = runtime_status

    @property
    def specs(self):
        """Gets the specs of this V1alpha1UIResourceStatus.  # noqa: E501

        Information about all the target specs that this resource summarizes.  # noqa: E501

        :return: The specs of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: list[V1alpha1UIResourceTargetSpec]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this V1alpha1UIResourceStatus.

        Information about all the target specs that this resource summarizes.  # noqa: E501

        :param specs: The specs of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: list[V1alpha1UIResourceTargetSpec]
        """

        self._specs = specs

    @property
    def trigger_mode(self):
        """Gets the trigger_mode of this V1alpha1UIResourceStatus.  # noqa: E501

        Bit mask representing whether this resource is run when: 1) When a file changes 2) When the resource initializes  # noqa: E501

        :return: The trigger_mode of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: int
        """
        return self._trigger_mode

    @trigger_mode.setter
    def trigger_mode(self, trigger_mode):
        """Sets the trigger_mode of this V1alpha1UIResourceStatus.

        Bit mask representing whether this resource is run when: 1) When a file changes 2) When the resource initializes  # noqa: E501

        :param trigger_mode: The trigger_mode of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: int
        """

        self._trigger_mode = trigger_mode

    @property
    def update_status(self):
        """Gets the update_status of this V1alpha1UIResourceStatus.  # noqa: E501

        The UpdateStatus is a simple, high-level summary of any update tasks to bring the resource up-to-date.  If the resource runs a server, this may include both build tasks and live-update syncing.  # noqa: E501

        :return: The update_status of this V1alpha1UIResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this V1alpha1UIResourceStatus.

        The UpdateStatus is a simple, high-level summary of any update tasks to bring the resource up-to-date.  If the resource runs a server, this may include both build tasks and live-update syncing.  # noqa: E501

        :param update_status: The update_status of this V1alpha1UIResourceStatus.  # noqa: E501
        :type: str
        """

        self._update_status = update_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1UIResourceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1UIResourceStatus):
            return True

        return self.to_dict() != other.to_dict()
