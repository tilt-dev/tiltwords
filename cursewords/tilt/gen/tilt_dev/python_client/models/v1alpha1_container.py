# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1Container(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'image': 'str',
        'name': 'str',
        'ports': 'list[int]',
        'ready': 'bool',
        'restarts': 'int',
        'state': 'V1alpha1ContainerState'
    }

    attribute_map = {
        'id': 'id',
        'image': 'image',
        'name': 'name',
        'ports': 'ports',
        'ready': 'ready',
        'restarts': 'restarts',
        'state': 'state'
    }

    def __init__(self, id=None, image=None, name=None, ports=None, ready=None, restarts=None, state=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1Container - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._image = None
        self._name = None
        self._ports = None
        self._ready = None
        self._restarts = None
        self._state = None
        self.discriminator = None

        self.id = id
        self.image = image
        self.name = name
        self.ports = ports
        self.ready = ready
        self.restarts = restarts
        self.state = state

    @property
    def id(self):
        """Gets the id of this V1alpha1Container.  # noqa: E501

        ID is the normalized container ID (the `docker://` prefix is stripped).  # noqa: E501

        :return: The id of this V1alpha1Container.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1alpha1Container.

        ID is the normalized container ID (the `docker://` prefix is stripped).  # noqa: E501

        :param id: The id of this V1alpha1Container.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image(self):
        """Gets the image of this V1alpha1Container.  # noqa: E501

        Image is the image the container is running.  # noqa: E501

        :return: The image of this V1alpha1Container.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this V1alpha1Container.

        Image is the image the container is running.  # noqa: E501

        :param image: The image of this V1alpha1Container.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and image is None:  # noqa: E501
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def name(self):
        """Gets the name of this V1alpha1Container.  # noqa: E501

        Name is the name of the container as defined in Kubernetes.  # noqa: E501

        :return: The name of this V1alpha1Container.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1Container.

        Name is the name of the container as defined in Kubernetes.  # noqa: E501

        :param name: The name of this V1alpha1Container.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this V1alpha1Container.  # noqa: E501

        Ports are exposed ports as extracted from the Pod spec.  This is added by Tilt for convenience when managing port forwards.  # noqa: E501

        :return: The ports of this V1alpha1Container.  # noqa: E501
        :rtype: list[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this V1alpha1Container.

        Ports are exposed ports as extracted from the Pod spec.  This is added by Tilt for convenience when managing port forwards.  # noqa: E501

        :param ports: The ports of this V1alpha1Container.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and ports is None:  # noqa: E501
            raise ValueError("Invalid value for `ports`, must not be `None`")  # noqa: E501

        self._ports = ports

    @property
    def ready(self):
        """Gets the ready of this V1alpha1Container.  # noqa: E501

        Ready is true if the container is passing readiness checks (or has none defined).  # noqa: E501

        :return: The ready of this V1alpha1Container.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this V1alpha1Container.

        Ready is true if the container is passing readiness checks (or has none defined).  # noqa: E501

        :param ready: The ready of this V1alpha1Container.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and ready is None:  # noqa: E501
            raise ValueError("Invalid value for `ready`, must not be `None`")  # noqa: E501

        self._ready = ready

    @property
    def restarts(self):
        """Gets the restarts of this V1alpha1Container.  # noqa: E501

        Restarts is the number of times the container has restarted.  This includes restarts before the Tilt daemon was started if the container was already running.  # noqa: E501

        :return: The restarts of this V1alpha1Container.  # noqa: E501
        :rtype: int
        """
        return self._restarts

    @restarts.setter
    def restarts(self, restarts):
        """Sets the restarts of this V1alpha1Container.

        Restarts is the number of times the container has restarted.  This includes restarts before the Tilt daemon was started if the container was already running.  # noqa: E501

        :param restarts: The restarts of this V1alpha1Container.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and restarts is None:  # noqa: E501
            raise ValueError("Invalid value for `restarts`, must not be `None`")  # noqa: E501

        self._restarts = restarts

    @property
    def state(self):
        """Gets the state of this V1alpha1Container.  # noqa: E501


        :return: The state of this V1alpha1Container.  # noqa: E501
        :rtype: V1alpha1ContainerState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1alpha1Container.


        :param state: The state of this V1alpha1Container.  # noqa: E501
        :type: V1alpha1ContainerState
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1Container):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1Container):
            return True

        return self.to_dict() != other.to_dict()
