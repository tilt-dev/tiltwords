# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1CmdSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'args': 'list[str]',
        'dir': 'str',
        'env': 'list[str]',
        'readiness_probe': 'V1alpha1Probe',
        'restart_on': 'V1alpha1RestartOnSpec'
    }

    attribute_map = {
        'args': 'args',
        'dir': 'dir',
        'env': 'env',
        'readiness_probe': 'readinessProbe',
        'restart_on': 'restartOn'
    }

    def __init__(self, args=None, dir=None, env=None, readiness_probe=None, restart_on=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1CmdSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._args = None
        self._dir = None
        self._env = None
        self._readiness_probe = None
        self._restart_on = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if dir is not None:
            self.dir = dir
        if env is not None:
            self.env = env
        if readiness_probe is not None:
            self.readiness_probe = readiness_probe
        if restart_on is not None:
            self.restart_on = restart_on

    @property
    def args(self):
        """Gets the args of this V1alpha1CmdSpec.  # noqa: E501

        Command-line arguments. Must have length at least 1.  # noqa: E501

        :return: The args of this V1alpha1CmdSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this V1alpha1CmdSpec.

        Command-line arguments. Must have length at least 1.  # noqa: E501

        :param args: The args of this V1alpha1CmdSpec.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def dir(self):
        """Gets the dir of this V1alpha1CmdSpec.  # noqa: E501

        Process working directory.  If the working directory is not specified, the command is run in the default Tilt working directory.  # noqa: E501

        :return: The dir of this V1alpha1CmdSpec.  # noqa: E501
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this V1alpha1CmdSpec.

        Process working directory.  If the working directory is not specified, the command is run in the default Tilt working directory.  # noqa: E501

        :param dir: The dir of this V1alpha1CmdSpec.  # noqa: E501
        :type: str
        """

        self._dir = dir

    @property
    def env(self):
        """Gets the env of this V1alpha1CmdSpec.  # noqa: E501

        Additional variables process environment.  Expressed as a C-style array of strings of the form [\"KEY1=VALUE1\", \"KEY2=VALUE2\", ...].  Environment variables are layered on top of the environment variables that Tilt runs with.  # noqa: E501

        :return: The env of this V1alpha1CmdSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this V1alpha1CmdSpec.

        Additional variables process environment.  Expressed as a C-style array of strings of the form [\"KEY1=VALUE1\", \"KEY2=VALUE2\", ...].  Environment variables are layered on top of the environment variables that Tilt runs with.  # noqa: E501

        :param env: The env of this V1alpha1CmdSpec.  # noqa: E501
        :type: list[str]
        """

        self._env = env

    @property
    def readiness_probe(self):
        """Gets the readiness_probe of this V1alpha1CmdSpec.  # noqa: E501


        :return: The readiness_probe of this V1alpha1CmdSpec.  # noqa: E501
        :rtype: V1alpha1Probe
        """
        return self._readiness_probe

    @readiness_probe.setter
    def readiness_probe(self, readiness_probe):
        """Sets the readiness_probe of this V1alpha1CmdSpec.


        :param readiness_probe: The readiness_probe of this V1alpha1CmdSpec.  # noqa: E501
        :type: V1alpha1Probe
        """

        self._readiness_probe = readiness_probe

    @property
    def restart_on(self):
        """Gets the restart_on of this V1alpha1CmdSpec.  # noqa: E501


        :return: The restart_on of this V1alpha1CmdSpec.  # noqa: E501
        :rtype: V1alpha1RestartOnSpec
        """
        return self._restart_on

    @restart_on.setter
    def restart_on(self, restart_on):
        """Sets the restart_on of this V1alpha1CmdSpec.


        :param restart_on: The restart_on of this V1alpha1CmdSpec.  # noqa: E501
        :type: V1alpha1RestartOnSpec
        """

        self._restart_on = restart_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1CmdSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1CmdSpec):
            return True

        return self.to_dict() != other.to_dict()
