# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1TiltBuild(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commit_sha': 'str',
        'date': 'str',
        'dev': 'bool',
        'version': 'str'
    }

    attribute_map = {
        'commit_sha': 'commitSHA',
        'date': 'date',
        'dev': 'dev',
        'version': 'version'
    }

    def __init__(self, commit_sha=None, date=None, dev=None, version=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1TiltBuild - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._commit_sha = None
        self._date = None
        self._dev = None
        self._version = None
        self.discriminator = None

        self.commit_sha = commit_sha
        self.date = date
        self.dev = dev
        self.version = version

    @property
    def commit_sha(self):
        """Gets the commit_sha of this V1alpha1TiltBuild.  # noqa: E501

        The Git digest of the commit this binary was built at.  # noqa: E501

        :return: The commit_sha of this V1alpha1TiltBuild.  # noqa: E501
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this V1alpha1TiltBuild.

        The Git digest of the commit this binary was built at.  # noqa: E501

        :param commit_sha: The commit_sha of this V1alpha1TiltBuild.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and commit_sha is None:  # noqa: E501
            raise ValueError("Invalid value for `commit_sha`, must not be `None`")  # noqa: E501

        self._commit_sha = commit_sha

    @property
    def date(self):
        """Gets the date of this V1alpha1TiltBuild.  # noqa: E501

        A human-readable string representing when the binary was built.  # noqa: E501

        :return: The date of this V1alpha1TiltBuild.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this V1alpha1TiltBuild.

        A human-readable string representing when the binary was built.  # noqa: E501

        :param date: The date of this V1alpha1TiltBuild.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def dev(self):
        """Gets the dev of this V1alpha1TiltBuild.  # noqa: E501

        Indicates whether this is a development build (true) or an official release (false).  # noqa: E501

        :return: The dev of this V1alpha1TiltBuild.  # noqa: E501
        :rtype: bool
        """
        return self._dev

    @dev.setter
    def dev(self, dev):
        """Sets the dev of this V1alpha1TiltBuild.

        Indicates whether this is a development build (true) or an official release (false).  # noqa: E501

        :param dev: The dev of this V1alpha1TiltBuild.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and dev is None:  # noqa: E501
            raise ValueError("Invalid value for `dev`, must not be `None`")  # noqa: E501

        self._dev = dev

    @property
    def version(self):
        """Gets the version of this V1alpha1TiltBuild.  # noqa: E501

        A semantic version string.  # noqa: E501

        :return: The version of this V1alpha1TiltBuild.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1alpha1TiltBuild.

        A semantic version string.  # noqa: E501

        :param version: The version of this V1alpha1TiltBuild.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1TiltBuild):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1TiltBuild):
            return True

        return self.to_dict() != other.to_dict()
