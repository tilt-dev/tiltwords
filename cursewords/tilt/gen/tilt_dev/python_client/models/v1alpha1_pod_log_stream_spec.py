# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1PodLogStreamSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ignore_containers': 'list[str]',
        'namespace': 'str',
        'only_containers': 'list[str]',
        'pod': 'str',
        'since_time': 'datetime'
    }

    attribute_map = {
        'ignore_containers': 'ignoreContainers',
        'namespace': 'namespace',
        'only_containers': 'onlyContainers',
        'pod': 'pod',
        'since_time': 'sinceTime'
    }

    def __init__(self, ignore_containers=None, namespace=None, only_containers=None, pod=None, since_time=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1PodLogStreamSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ignore_containers = None
        self._namespace = None
        self._only_containers = None
        self._pod = None
        self._since_time = None
        self.discriminator = None

        if ignore_containers is not None:
            self.ignore_containers = ignore_containers
        if namespace is not None:
            self.namespace = namespace
        if only_containers is not None:
            self.only_containers = only_containers
        if pod is not None:
            self.pod = pod
        if since_time is not None:
            self.since_time = since_time

    @property
    def ignore_containers(self):
        """Gets the ignore_containers of this V1alpha1PodLogStreamSpec.  # noqa: E501

        The names of containers to exclude from the stream.  If `onlyContainers` and `ignoreContainers` are not set, will watch all containers in the pod.  # noqa: E501

        :return: The ignore_containers of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._ignore_containers

    @ignore_containers.setter
    def ignore_containers(self, ignore_containers):
        """Sets the ignore_containers of this V1alpha1PodLogStreamSpec.

        The names of containers to exclude from the stream.  If `onlyContainers` and `ignoreContainers` are not set, will watch all containers in the pod.  # noqa: E501

        :param ignore_containers: The ignore_containers of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :type: list[str]
        """

        self._ignore_containers = ignore_containers

    @property
    def namespace(self):
        """Gets the namespace of this V1alpha1PodLogStreamSpec.  # noqa: E501

        The namespace of the pod to watch. Defaults to the kubecontext default namespace.  # noqa: E501

        :return: The namespace of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V1alpha1PodLogStreamSpec.

        The namespace of the pod to watch. Defaults to the kubecontext default namespace.  # noqa: E501

        :param namespace: The namespace of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def only_containers(self):
        """Gets the only_containers of this V1alpha1PodLogStreamSpec.  # noqa: E501

        The names of containers to include in the stream.  If `onlyContainers` and `ignoreContainers` are not set, will watch all containers in the pod.  # noqa: E501

        :return: The only_containers of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._only_containers

    @only_containers.setter
    def only_containers(self, only_containers):
        """Sets the only_containers of this V1alpha1PodLogStreamSpec.

        The names of containers to include in the stream.  If `onlyContainers` and `ignoreContainers` are not set, will watch all containers in the pod.  # noqa: E501

        :param only_containers: The only_containers of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :type: list[str]
        """

        self._only_containers = only_containers

    @property
    def pod(self):
        """Gets the pod of this V1alpha1PodLogStreamSpec.  # noqa: E501

        The name of the pod to watch. Required.  # noqa: E501

        :return: The pod of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this V1alpha1PodLogStreamSpec.

        The name of the pod to watch. Required.  # noqa: E501

        :param pod: The pod of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :type: str
        """

        self._pod = pod

    @property
    def since_time(self):
        """Gets the since_time of this V1alpha1PodLogStreamSpec.  # noqa: E501

        An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned.  Translates directly to the underlying PodLogOptions.  # noqa: E501

        :return: The since_time of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._since_time

    @since_time.setter
    def since_time(self, since_time):
        """Sets the since_time of this V1alpha1PodLogStreamSpec.

        An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned.  Translates directly to the underlying PodLogOptions.  # noqa: E501

        :param since_time: The since_time of this V1alpha1PodLogStreamSpec.  # noqa: E501
        :type: datetime
        """

        self._since_time = since_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1PodLogStreamSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1PodLogStreamSpec):
            return True

        return self.to_dict() != other.to_dict()
