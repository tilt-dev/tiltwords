# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1KubernetesDiscoverySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'extra_selectors': 'list[V1LabelSelector]',
        'watches': 'list[V1alpha1KubernetesWatchRef]'
    }

    attribute_map = {
        'extra_selectors': 'extraSelectors',
        'watches': 'watches'
    }

    def __init__(self, extra_selectors=None, watches=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1KubernetesDiscoverySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._extra_selectors = None
        self._watches = None
        self.discriminator = None

        if extra_selectors is not None:
            self.extra_selectors = extra_selectors
        self.watches = watches

    @property
    def extra_selectors(self):
        """Gets the extra_selectors of this V1alpha1KubernetesDiscoverySpec.  # noqa: E501

        ExtraSelectors are label selectors that will force discovery of a Pod even if it does not match the AncestorUID.  This should only be necessary in the event that a CRD creates Pods but does not set an owner reference to itself.  # noqa: E501

        :return: The extra_selectors of this V1alpha1KubernetesDiscoverySpec.  # noqa: E501
        :rtype: list[V1LabelSelector]
        """
        return self._extra_selectors

    @extra_selectors.setter
    def extra_selectors(self, extra_selectors):
        """Sets the extra_selectors of this V1alpha1KubernetesDiscoverySpec.

        ExtraSelectors are label selectors that will force discovery of a Pod even if it does not match the AncestorUID.  This should only be necessary in the event that a CRD creates Pods but does not set an owner reference to itself.  # noqa: E501

        :param extra_selectors: The extra_selectors of this V1alpha1KubernetesDiscoverySpec.  # noqa: E501
        :type: list[V1LabelSelector]
        """

        self._extra_selectors = extra_selectors

    @property
    def watches(self):
        """Gets the watches of this V1alpha1KubernetesDiscoverySpec.  # noqa: E501

        Watches determine what resources are discovered.  If a discovered resource (e.g. Pod) matches the KubernetesWatchRef UID exactly, it will be reported. If a discovered resource is transitively owned by the KubernetesWatchRef UID, it will be reported.  # noqa: E501

        :return: The watches of this V1alpha1KubernetesDiscoverySpec.  # noqa: E501
        :rtype: list[V1alpha1KubernetesWatchRef]
        """
        return self._watches

    @watches.setter
    def watches(self, watches):
        """Sets the watches of this V1alpha1KubernetesDiscoverySpec.

        Watches determine what resources are discovered.  If a discovered resource (e.g. Pod) matches the KubernetesWatchRef UID exactly, it will be reported. If a discovered resource is transitively owned by the KubernetesWatchRef UID, it will be reported.  # noqa: E501

        :param watches: The watches of this V1alpha1KubernetesDiscoverySpec.  # noqa: E501
        :type: list[V1alpha1KubernetesWatchRef]
        """
        if self.local_vars_configuration.client_side_validation and watches is None:  # noqa: E501
            raise ValueError("Invalid value for `watches`, must not be `None`")  # noqa: E501

        self._watches = watches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1KubernetesDiscoverySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1KubernetesDiscoverySpec):
            return True

        return self.to_dict() != other.to_dict()
