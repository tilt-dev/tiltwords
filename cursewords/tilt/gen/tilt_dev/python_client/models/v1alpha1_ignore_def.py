# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1IgnoreDef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_path': 'str',
        'patterns': 'list[str]'
    }

    attribute_map = {
        'base_path': 'basePath',
        'patterns': 'patterns'
    }

    def __init__(self, base_path=None, patterns=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1IgnoreDef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base_path = None
        self._patterns = None
        self.discriminator = None

        self.base_path = base_path
        if patterns is not None:
            self.patterns = patterns

    @property
    def base_path(self):
        """Gets the base_path of this V1alpha1IgnoreDef.  # noqa: E501

        BasePath is the base path for the patterns. It cannot be empty.  If no patterns are specified, everything under it will be recursively ignored.  # noqa: E501

        :return: The base_path of this V1alpha1IgnoreDef.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this V1alpha1IgnoreDef.

        BasePath is the base path for the patterns. It cannot be empty.  If no patterns are specified, everything under it will be recursively ignored.  # noqa: E501

        :param base_path: The base_path of this V1alpha1IgnoreDef.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_path is None:  # noqa: E501
            raise ValueError("Invalid value for `base_path`, must not be `None`")  # noqa: E501

        self._base_path = base_path

    @property
    def patterns(self):
        """Gets the patterns of this V1alpha1IgnoreDef.  # noqa: E501

        Patterns are dockerignore style rules. Absolute-style patterns will be rooted to the BasePath.  See https://docs.docker.com/engine/reference/builder/#dockerignore-file.  # noqa: E501

        :return: The patterns of this V1alpha1IgnoreDef.  # noqa: E501
        :rtype: list[str]
        """
        return self._patterns

    @patterns.setter
    def patterns(self, patterns):
        """Sets the patterns of this V1alpha1IgnoreDef.

        Patterns are dockerignore style rules. Absolute-style patterns will be rooted to the BasePath.  See https://docs.docker.com/engine/reference/builder/#dockerignore-file.  # noqa: E501

        :param patterns: The patterns of this V1alpha1IgnoreDef.  # noqa: E501
        :type: list[str]
        """

        self._patterns = patterns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1IgnoreDef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1IgnoreDef):
            return True

        return self.to_dict() != other.to_dict()
