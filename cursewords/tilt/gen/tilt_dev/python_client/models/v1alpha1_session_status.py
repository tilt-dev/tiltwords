# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1SessionStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'done': 'bool',
        'error': 'str',
        'pid': 'int',
        'start_time': 'datetime',
        'targets': 'list[V1alpha1Target]'
    }

    attribute_map = {
        'done': 'done',
        'error': 'error',
        'pid': 'pid',
        'start_time': 'startTime',
        'targets': 'targets'
    }

    def __init__(self, done=None, error=None, pid=None, start_time=None, targets=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1SessionStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._done = None
        self._error = None
        self._pid = None
        self._start_time = None
        self._targets = None
        self.discriminator = None

        self.done = done
        if error is not None:
            self.error = error
        self.pid = pid
        self.start_time = start_time
        self.targets = targets

    @property
    def done(self):
        """Gets the done of this V1alpha1SessionStatus.  # noqa: E501

        Done indicates whether this Session has completed its work and is ready to exit.  # noqa: E501

        :return: The done of this V1alpha1SessionStatus.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this V1alpha1SessionStatus.

        Done indicates whether this Session has completed its work and is ready to exit.  # noqa: E501

        :param done: The done of this V1alpha1SessionStatus.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and done is None:  # noqa: E501
            raise ValueError("Invalid value for `done`, must not be `None`")  # noqa: E501

        self._done = done

    @property
    def error(self):
        """Gets the error of this V1alpha1SessionStatus.  # noqa: E501

        Error is a non-empty string when the Session is Done but encountered a failure as defined by the ExitCondition from the SessionSpec.  # noqa: E501

        :return: The error of this V1alpha1SessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V1alpha1SessionStatus.

        Error is a non-empty string when the Session is Done but encountered a failure as defined by the ExitCondition from the SessionSpec.  # noqa: E501

        :param error: The error of this V1alpha1SessionStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def pid(self):
        """Gets the pid of this V1alpha1SessionStatus.  # noqa: E501

        PID is the process identifier for this instance of Tilt.  # noqa: E501

        :return: The pid of this V1alpha1SessionStatus.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this V1alpha1SessionStatus.

        PID is the process identifier for this instance of Tilt.  # noqa: E501

        :param pid: The pid of this V1alpha1SessionStatus.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and pid is None:  # noqa: E501
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def start_time(self):
        """Gets the start_time of this V1alpha1SessionStatus.  # noqa: E501

        StartTime is when the Tilt engine was first started.  # noqa: E501

        :return: The start_time of this V1alpha1SessionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1alpha1SessionStatus.

        StartTime is when the Tilt engine was first started.  # noqa: E501

        :param start_time: The start_time of this V1alpha1SessionStatus.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and start_time is None:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def targets(self):
        """Gets the targets of this V1alpha1SessionStatus.  # noqa: E501

        Targets are normalized representations of the servers/jobs managed by this Session.  A resource from a Tiltfile might produce one or more targets. A target can also be shared across multiple resources (e.g. an image referenced by multiple K8s pods).  # noqa: E501

        :return: The targets of this V1alpha1SessionStatus.  # noqa: E501
        :rtype: list[V1alpha1Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this V1alpha1SessionStatus.

        Targets are normalized representations of the servers/jobs managed by this Session.  A resource from a Tiltfile might produce one or more targets. A target can also be shared across multiple resources (e.g. an image referenced by multiple K8s pods).  # noqa: E501

        :param targets: The targets of this V1alpha1SessionStatus.  # noqa: E501
        :type: list[V1alpha1Target]
        """
        if self.local_vars_configuration.client_side_validation and targets is None:  # noqa: E501
            raise ValueError("Invalid value for `targets`, must not be `None`")  # noqa: E501

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SessionStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1SessionStatus):
            return True

        return self.to_dict() != other.to_dict()
