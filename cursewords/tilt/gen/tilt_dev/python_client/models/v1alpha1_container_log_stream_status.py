# coding: utf-8

"""
    tilt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.20.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tilt_dev.python_client.configuration import Configuration


class V1alpha1ContainerLogStreamStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'error': 'str',
        'name': 'str',
        'terminated': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'error': 'error',
        'name': 'name',
        'terminated': 'terminated'
    }

    def __init__(self, active=None, error=None, name=None, terminated=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ContainerLogStreamStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._error = None
        self._name = None
        self._terminated = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if error is not None:
            self.error = error
        if name is not None:
            self.name = name
        if terminated is not None:
            self.terminated = terminated

    @property
    def active(self):
        """Gets the active of this V1alpha1ContainerLogStreamStatus.  # noqa: E501

        True when the stream is set up and streaming logs properly.  # noqa: E501

        :return: The active of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this V1alpha1ContainerLogStreamStatus.

        True when the stream is set up and streaming logs properly.  # noqa: E501

        :param active: The active of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def error(self):
        """Gets the error of this V1alpha1ContainerLogStreamStatus.  # noqa: E501

        The last error message encountered while streaming.  Empty when the stream is actively streaming or successfully terminated.  # noqa: E501

        :return: The error of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V1alpha1ContainerLogStreamStatus.

        The last error message encountered while streaming.  Empty when the stream is actively streaming or successfully terminated.  # noqa: E501

        :param error: The error of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def name(self):
        """Gets the name of this V1alpha1ContainerLogStreamStatus.  # noqa: E501

        The name of the container.  # noqa: E501

        :return: The name of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1ContainerLogStreamStatus.

        The name of the container.  # noqa: E501

        :param name: The name of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def terminated(self):
        """Gets the terminated of this V1alpha1ContainerLogStreamStatus.  # noqa: E501

        True when the logs are done stream and the container is terminated.  # noqa: E501

        :return: The terminated of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :rtype: bool
        """
        return self._terminated

    @terminated.setter
    def terminated(self, terminated):
        """Sets the terminated of this V1alpha1ContainerLogStreamStatus.

        True when the logs are done stream and the container is terminated.  # noqa: E501

        :param terminated: The terminated of this V1alpha1ContainerLogStreamStatus.  # noqa: E501
        :type: bool
        """

        self._terminated = terminated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ContainerLogStreamStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ContainerLogStreamStatus):
            return True

        return self.to_dict() != other.to_dict()
